#!/usr/bin/env python3
"""
Example: Enhanced Prompt with Crazy Frog Context

Shows exactly how CE context is injected into agent prompts.
"""
from agentic_service.models.crazy_frog_request import CrazyFrogProvisioningRequest
from agentic_service.utils.prompt_enhancer import enhance_demo_story_prompt
from agentic_service.utils import prompt_templates


def show_enhanced_prompt_example():
    """Demonstrate prompt enhancement with real example"""

    # Sample Crazy Frog request
    request = CrazyFrogProvisioningRequest(
        customer_url="https://acme-retail.com",
        use_case_context="""
        Leading e-commerce retailer with $500M+ annual revenue.

        Current pain points:
        - Marketing team relies on static dashboards requiring SQL expertise
        - Data analysts spend 60% of time writing queries for business users
        - No self-service analytics for non-technical stakeholders

        Desired capabilities:
        1. Customer cohort behavior analysis (RFM segmentation)
        2. Product affinity and cross-sell opportunities
        3. Marketing attribution across 5+ channels
        4. Seasonal trend forecasting

        Key stakeholders:
        - CMO: Needs strategic insights without technical dependency
        - Marketing Analysts: Need to answer ad-hoc questions quickly
        - Finance Team: Needs revenue forecasting and cohort analysis

        Success criteria:
        - Enable non-technical users to ask complex analytical questions
        - Reduce time-to-insight from days to minutes
        - Demonstrate SQL-level complexity with natural language
        """,
        industry_hint="Retail & E-commerce",
        target_persona="CMO",
        demo_complexity="Advanced",
        special_focus="Marketing Attribution",
        integrations="Google Analytics, Salesforce Commerce Cloud",
        avoid_topics="competitor pricing, internal cost structures"
    )

    # Get base Demo Story prompt
    base_prompt = prompt_templates.DEMO_STORY_PROMPT

    # Build context block
    from agentic_service.utils.prompt_enhancer import build_crazy_frog_context_block
    context_block = build_crazy_frog_context_block(request)

    # Format the prompt (simulating what agents would do)
    enhanced_prompt = base_prompt.format(
        crazy_frog_context=context_block,
        customer_info='{"company_name": "ACME Retail", "industry": "E-commerce"}'
    )

    # Display
    print("=" * 100)
    print("EXAMPLE: ENHANCED DEMO STORY PROMPT WITH CRAZY FROG CONTEXT")
    print("=" * 100)

    print("\n📝 SCENARIO:")
    print("-" * 100)
    print(f"Customer URL: {request.customer_url}")
    print(f"Persona: {request.target_persona}")
    print(f"Complexity: {request.demo_complexity}")
    print(f"Focus: {request.special_focus}")

    print("\n\n🔍 WHAT THE DEMO STORY AGENT RECEIVES:")
    print("-" * 100)
    print(enhanced_prompt[:2000])  # Show first 2000 chars
    print("\n... [prompt continues] ...\n")

    print("\n💡 KEY OBSERVATIONS:")
    print("-" * 100)
    print("1. ✅ CE context appears at the TOP of the prompt")
    print("2. ✅ Persona (CMO) explicitly mentioned with tailoring instructions")
    print("3. ✅ Complexity level (Advanced) with specific SQL pattern guidance")
    print("4. ✅ Special focus (Marketing Attribution) emphasized for queries")
    print("5. ✅ Integrations listed to guide data model design")
    print("6. ✅ Topics to avoid clearly stated")

    print("\n\n📊 EXPECTED IMPACT ON DEMO GENERATION:")
    print("-" * 100)
    print("""
    WITHOUT Crazy Frog Context:
    - Generic e-commerce demo
    - Mixed complexity queries
    - General business metrics
    - Standard schema (customers, orders, products)

    WITH Crazy Frog Context:
    - CMO-focused marketing attribution demo
    - Advanced SQL (CTEs, window functions)
    - Marketing-specific metrics (LTV, cohorts, attribution)
    - Schema includes: marketing_touchpoints, cohorts, channel_attribution
    - Queries like: "Which channels drive highest lifetime value customers?"
    """)

    print("\n\n🎯 SAMPLE GOLDEN QUERY THAT WOULD BE GENERATED:")
    print("-" * 100)
    print("""
    Question (Natural Language):
    "Show me customer lifetime value by acquisition channel, and identify which
     channels are trending up vs down in recent cohorts"

    Expected SQL (Generated by Demo Story Agent):
    ```sql
    WITH cohort_ltv AS (
        SELECT
            c.acquisition_channel,
            DATE_TRUNC('month', c.acquisition_date) as cohort_month,
            AVG(c.lifetime_value) as avg_ltv,
            COUNT(DISTINCT c.customer_id) as cohort_size
        FROM customers c
        WHERE c.acquisition_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH)
        GROUP BY 1, 2
    ),
    channel_trends AS (
        SELECT
            acquisition_channel,
            cohort_month,
            avg_ltv,
            LAG(avg_ltv) OVER (
                PARTITION BY acquisition_channel
                ORDER BY cohort_month
            ) as prev_month_ltv,
            cohort_size
        FROM cohort_ltv
    )
    SELECT
        acquisition_channel,
        cohort_month,
        avg_ltv,
        ROUND(((avg_ltv - prev_month_ltv) / prev_month_ltv * 100), 2) as ltv_change_pct,
        CASE
            WHEN avg_ltv > prev_month_ltv THEN 'TRENDING UP ↑'
            WHEN avg_ltv < prev_month_ltv THEN 'TRENDING DOWN ↓'
            ELSE 'STABLE →'
        END as trend,
        cohort_size
    FROM channel_trends
    WHERE prev_month_ltv IS NOT NULL
    ORDER BY acquisition_channel, cohort_month DESC;
    ```

    Business Value:
    - CMO can identify which marketing channels produce highest-value customers
    - Spot emerging trends in channel effectiveness
    - Make data-driven budget allocation decisions
    - No SQL knowledge required!

    Wow Factor:
    "This 30+ line SQL query with CTEs, window functions, and cohort analysis...
     can be asked in ONE SENTENCE! 🚀"
    """)

    print("\n" + "=" * 100)
    print("✅ This is the power of Crazy Frog Mode!")
    print("=" * 100)


if __name__ == "__main__":
    show_enhanced_prompt_example()
